function holdfiringpattern% Check Parameters% BaseAna     = 1; % BaseRange   = [-500, 0]; %(ms)% LValue      = 2;        % # times of Basestd% nn          = 8;% kk          = 5;% filename    = 'c:\data\AnalysesStats.xls'% fid         = fopen(filename,'a')% disp(fid)AnalysisObjects = gsma;nAnalyses = length(AnalysisObjects);if nAnalyses < 1   disp('PeakAreas: No selected analysis -- nothing to do')   return;end% fprintf(fid,'FileName\tSpike\tTrigger\tComponents\tnTrials\tBaseStart(ms)\tBaseEnd(ms)\tBaseMean(Hz)\tBaseSTD(Hz)\tStart(ms)\tStartValue(Hz)\tEnd(ms)\tEndValue(Hz)\tPeakTime(ms)\tPeak(Hz)\tMean(Hz)\tp\t(<0.05)\n');for ana = 1:nAnalyses   analysisName = get(AnalysisObjects(ana), 'Name');   FullName = get(AnalysisObjects(ana), 'FullName');   AnalysesComponents = analyses(AnalysisObjects(ana), 'componentobjs');   nAnalysesComponents = length(AnalysesComponents);   if nAnalysesComponents == 0      disp(['PeakAreas: No components to do: ' analysisName]);      break;   end%    figure('Name',FullName,...%        'NumberTitle','off',...%        'PaperOrientation','portrait',...%        'PaperPosition',[-2 4.91751 26.4382 19.8287],...%[-2.72314 4.91751 26.4382 19.8287]%        'PaperPositionMode','manual',...%        'PaperType','A4',...%        'Pointer','fullcrosshair',...%        'Position',[100    40   1000   750]);%    uicontrol('BackgroundColor',get(gcf,'Color'),...%        'Style','text',...%        'HorizontalAlignment','center',...%        'Position',[80 720 400 20],...%        'String',FullName);%    htext    = uicontrol('BackgroundColor',[1,1,1],...%        'Style','text',...%        'HorizontalAlignment','left',...%        'Position',[500 100 400 600],...%        'String',FullName);%   message=[];   %    fprintf(fid,'----------------------\n%s\n',FullName);                       % Caculate statistics   i=3;    maxTrials = 0;   analysisType = get(AnalysesComponents(i), 'SubClass');   spikeName = get(AnalysesComponents(i), 'Target');   TimeUnits = get(AnalysesComponents(i), 'TimeUnits');   %       YDataUnits = get(AnalysesComponents(i), 'YUnits');   ConversionFactor = units('conversionfactor', 'time', TimeUnits, 'milliseconds');        WindowStart = get(AnalysesComponents(i), 'WindowStart') * ConversionFactor;   WindowStop = get(AnalysesComponents(i), 'WindowStop') * ConversionFactor;                trialData = get(AnalysesComponents(i), 'TrialData');   trialTimes = get(AnalysesComponents(i), 'TrialTriggerTime');   TrialsToUse   = get(AnalysesComponents(i), 'TrialsToUse');   nTotalTrials = get(AnalysesComponents(i), 'TrialCount');   nTrials = size(trialData, 1);   name = get(AnalysesComponents(i), 'Name');                     load TrialsToUseSet.mat   eval(['TrialsToUse   = TrialsToUseSet.',analysisName,'.',spikeName,';']);   for ii=1:nTrials       Data(ii,:)    = [sum((trialData{ii}>=0.4&trialData{ii}<0.55))/0.15,sum((trialData{ii}>=0.55&trialData{ii}<0.7))/0.15,sum((trialData{ii}>=0.7&trialData{ii}<0.85))/0.15];   end      Data = Data(TrialsToUse,:);      p    =friedman(Data,1,'off');   %    disp('----------------------');   disp(FullName)   if p<0.05       disp([num2str(p),'*'])   else       disp([num2str(p)])   end   disp(mean(Data,1))%    xData = get(AnalysesComponents(i), 'XData') * ConversionFactor;%    binWidth = xData(2) - xData(1);%    yData = get(AnalysesComponents(i), 'YData') / binWidth * ConversionFactor / nTotalTrials;%    nPoints = length(yData);set(gcf,'Name',[analysisName,'-',spikeName,'(n=',num2str(length(TrialsToUse)),')'],...    'NumberTitle','off');   end