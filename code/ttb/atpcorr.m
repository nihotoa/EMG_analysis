function tpcorr% Check Parameterssmoothing_factor    =5;IndexForcecoef    =5;smoothing_factor    =5;figure(5)AnalysisObjects = gsma;nAnalyses = length(AnalysisObjects);if nAnalyses < 1   disp('PeakAreas: No selected analysis -- nothing to do')   return;end% fprintf(fid,'FileName\tSpike\tTrigger\tComponents\tnTrials\tBaseStart(ms)\tBaseEnd(ms)\tBaseMean(Hz)\tBaseSTD(Hz)\tStart(ms)\tStartValue(Hz)\tEnd(ms)\tEndValue(Hz)\tPeakTime(ms)\tPeak(Hz)\tMean(Hz)\tp\t(<0.05)\n');for ana = 1:nAnalyses   analysisName = get(AnalysisObjects(ana), 'Name');   FullName = get(AnalysisObjects(ana), 'FullName');   AnalysesComponents = analyses(AnalysisObjects(ana), 'componentobjs');   nAnalysesComponents = length(AnalysesComponents);   if nAnalysesComponents == 0      disp(['PeakAreas: No components to do: ' analysisName]);      break;   end   maxTrials = 0;   for i = 1:nAnalysesComponents      analysisType = get(AnalysesComponents(i), 'SubClass');%       spikeName = get(AnalysesComponents(i), 'Target');      TimeUnits = get(AnalysesComponents(i), 'TimeUnits');%       YDataUnits = get(AnalysesComponents(i), 'YUnits');      ConversionFactor = units('conversionfactor', 'time', TimeUnits, 'milliseconds');           WindowStart = get(AnalysesComponents(i), 'WindowStart') * ConversionFactor;      WindowStop = get(AnalysesComponents(i), 'WindowStop') * ConversionFactor;      xData = get(AnalysesComponents(i), 'XData') * ConversionFactor;      trialData = get(AnalysesComponents(i), 'TrialData');      trialTimes = get(AnalysesComponents(i), 'TrialTriggerTime');%       TrialsToUse   = get(AnalysesComponents(i), 'TrialsToUse');%       nTotalTrials = get(AnalysesComponents(i), 'TrialCount');      nTrials = size(trialData, 1);      name = get(AnalysesComponents(i), 'Name'); %       disp(name)            switch analysisType          case 'perievent histogram'              Datalabel{1}  = 'PeakFR(Hz)';   %for phasic-peak1/3              DataTimelabel{1}  = 'PeakFR(ms)';   %for phasic-peak2/3%               Datalabel{1}  = 'TroughFR(Hz)';   %for phasic-trough1/3%               DatalabelTime{1}  = 'TroughFR(ms)';   %for phasic-trough2/3              for ii=1:nTrials                  tempData  = trialData{ii};                  xtempData  = trialData{ii} * ConversionFactor;                  if(length(tempData)<2)                      Data(ii,1)    = NaN;                      DataTime(ii,1)    = NaN;                  else                      tempData  = [0,1./(tempData(2:length(tempData))-tempData(1:length(tempData)-1))]; %Hz%                       >>                      subplot(2,1,1)                      plot(xtempData,tempData,'k-')                      set(gca,'xLim',[WindowStart WindowStop])%                       <<                      tempData  = conv(tempData,ones(1,smoothing_factor))/smoothing_factor;                      tempData(1:(smoothing_factor-1)) =[];                      [Data(ii,1),ind]    = max(tempData);  %for phasic-peak3/3%                       [Data(ii,1),ind]    = min(tempData);    %for phasic-trough3/3                      DataTime(ii,1)    =xtempData(ind);                      %                       >>                                            subplot(2,1,2)                      plot(xtempData,tempData,'k-',DataTime(ii,1),Data(ii,1),'r*')                      set(gca,'xLim',[WindowStart WindowStop])                      title(ii)                      pause(0.1)%                       <<                                        end              end              spikeName = get(AnalysesComponents(i), 'Target');          case 'triggered average'              Datalabel{i+1}    = name;              DataTimelabel{i+1}    = [name,'(ms)'];              [Data(:,i+1),ind]    = max(trialData,[],2); %for gripping1/1%               [Data(:,i+1),ind]    = min(trialData,[],2); %for releasing1/1              DataTime(:,i+1)    =xData(ind);%               Data(DataTime>=(WindowStop-(xData(2)-xData(1))))   =NaN;      end                                end  %for i = 1:nAnalysesComponents   end     %for ana = 1:nAnalyses% load TrialsToUseSet.mat% eval(['TrialsToUse   = TrialsToUseSet.',analysisName,'.',spikeName,';']);load Aobasss  = eval(['Aoba.',analysisName]);eval(['TrialsToUse   = [',sss,'];'])Data  = Data(TrialsToUse,:);DataTime  = DataTime(TrialsToUse,:);Data    = Data(Data(:,1)>=0,:);DataTime    = DataTime(Data(:,1)>=0,:);filename    =sprintf('c:\\data\\pcorr%s-%s.xls',analysisName,spikeName);disp(filename)for ii=2:length(Datalabel)    disp(Datalabel{ii})    [r,p]   =corr(Data(:,1),Data(:,ii));    disp([' r   =',num2str(r)])    disp([' r^2 =',num2str(r^2)])    disp([' p   =',num2str(p)])    if p<0.05        disp('*')    elseif p<0.1        disp('+')    endendfid = fopen(filename,'a');fprintf(fid,'no');for ii=1:length(Datalabel)    fprintf(fid,'\t%s',Datalabel{ii});endfor ii=1:length(DataTimelabel)    fprintf(fid,'\t%s',DataTimelabel{ii});endfprintf(fid,'\n');for jj=1:size(Data,1)    fprintf(fid,'%d',jj);    for ii=1:size(Data,2);        fprintf(fid,'\t%f',Data(jj,ii));    end    for ii=1:size(DataTime,2);        fprintf(fid,'\t%f',DataTime(jj,ii));    end    fprintf(fid,'\n');endfclose(fid);close(5)