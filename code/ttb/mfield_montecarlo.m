function [rMPI,CA,Ind,sortCA,CA_act,Ind_act,sortCA_act,mean_sortCA,sd_sortCA,mean_nonPrefCA,sd_nonPrefCA,sortR,mean_sortR,sd_sortR,mean_nonPrefR,sd_nonPrefR,filt_ind]  =mfield_montecarlo(nrep,method,abs_flag,randset,animal_filt,celltype_filt)

% method  = 'within','between_nonzero','between_zeropad','draw','randn';

if nargin<1
    nrep    = 10000;
    method  = 'within';
    abs_flag    = 1;
    randset = sum(100*clock);
    animal_filt = [];
    celltype_filt = [];
elseif nargin<2
    method  = 'within';
    abs_flag    = 1;
    randset = sum(100*clock);
    animal_filt = [];
    celltype_filt = [];
elseif nargin<3
    abs_flag    = 1;
    animal_filt = [];
    celltype_filt = [];
elseif nargin<4
    randset = sum(100*clock);
    animal_filt = [];
    celltype_filt = [];
elseif nargin<5
    animal_filt = [];
    celltype_filt = [];
elseif nargin<6
    celltype_filt = [];
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%

W{1}  = [
    0.7429829370434280 	0.6086565536632160 	0.0525857395305449 	0.6188824784090010 	0.6707912458646810 	0.9902096144167450 	0.5065921978572400 	0.5716356466377970 	0.7384068825278880 	0.3737329355948790 	0.0180003139877095 	0.3391874408679090
    0.7429829370434280 	0.6086565536632160 	0.0525857395305449 	0.6188824784090010 	0.6707912458646810 	0.9902096144167450 	0.5065921978572400 	0.5716356466377970 	0.7384068825278880 	0.3737329355948790 	0.0180003139877095 	0.3391874408679090
    0.7429829370434280 	0.6086565536632160 	0.0525857395305449 	0.6188824784090010 	0.6707912458646810 	0.9902096144167450 	0.5065921978572400 	0.5716356466377970 	0.7384068825278880 	0.3737329355948790 	0.0180003139877095 	0.3391874408679090
    0.7429829370434280 	0.6086565536632160 	0.0525857395305449 	0.6188824784090010 	0.6707912458646810 	0.9902096144167450 	0.5065921978572400 	0.5716356466377970 	0.7384068825278880 	0.3737329355948790 	0.0180003139877095 	0.3391874408679090
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    0.8459836419859200 	0.8017796236720400 	0.3292816707674700 	0.2587011295600920 	0.7411643556847130 	0.8010547239823750 	1.0186635126461200 	0.0191548224028418 	0.2912328109129000 	0.1422699048482300 	0.3742343505128560 	0.0114004180148677
    ];

W{2}  = [
    0.2147763049147680 	0.2298242044608000 	0.1039473387576190 	0.2703356553247670 	0.2289560596115270 	0.0590723003065823 	0.3738536728966710 	0.2505767827057730 	0.1875331665281920 	0.4218620094910790 	1.0015181139150500 	0.6226278404515950
    0.2147763049147680 	0.2298242044608000 	0.1039473387576190 	0.2703356553247670 	0.2289560596115270 	0.0590723003065823 	0.3738536728966710 	0.2505767827057730 	0.1875331665281920 	0.4218620094910790 	1.0015181139150500 	0.6226278404515950
    0.2147763049147680 	0.2298242044608000 	0.1039473387576190 	0.2703356553247670 	0.2289560596115270 	0.0590723003065823 	0.3738536728966710 	0.2505767827057730 	0.1875331665281920 	0.4218620094910790 	1.0015181139150500 	0.6226278404515950
    0.2147763049147680 	0.2298242044608000 	0.1039473387576190 	0.2703356553247670 	0.2289560596115270 	0.0590723003065823 	0.3738536728966710 	0.2505767827057730 	0.1875331665281920 	0.4218620094910790 	1.0015181139150500 	0.6226278404515950
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    0.0807736595025603 	0.1230605646265760 	0.3961203036555870 	0.3666005729027890 	0.0764663353846746 	0.1499726663977070 	0.1519342472989950 	0.0435613754124702 	0.3556001114964250 	0.5274099683327430 	0.3953801005179450 	1.1833105179016800
    ];

W{3}  = [
    0.0665057334683575 	0.1189482771635700 	0.8537623658984590 	0.0970939051054662 	0.0930274645885410 	0.0186192558398877 	0.0743851565361926 	0.1632440432853810 	0.0911881624931724 	0.0814835717503568 	0.0745285040948691 	0.0500251646162348
    0.0665057334683575 	0.1189482771635700 	0.8537623658984590 	0.0970939051054662 	0.0930274645885410 	0.0186192558398877 	0.0743851565361926 	0.1632440432853810 	0.0911881624931724 	0.0814835717503568 	0.0745285040948691 	0.0500251646162348
    0.0665057334683575 	0.1189482771635700 	0.8537623658984590 	0.0970939051054662 	0.0930274645885410 	0.0186192558398877 	0.0743851565361926 	0.1632440432853810 	0.0911881624931724 	0.0814835717503568 	0.0745285040948691 	0.0500251646162348
    0.0665057334683575 	0.1189482771635700 	0.8537623658984590 	0.0970939051054662 	0.0930274645885410 	0.0186192558398877 	0.0743851565361926 	0.1632440432853810 	0.0911881624931724 	0.0814835717503568 	0.0745285040948691 	0.0500251646162348
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    0.0559893625518462 	0.0463922565489733 	0.1517433392863760 	0.1834999236648220 	0.1442290921894730 	0.0741506469477900 	0.0302520758727892 	1.0238077027054100 	0.3487381023975440 	0.1051336598163760 	0.1155786310744380 	0.0106743844457241
    ];

MPI = [
0.000000000000000 	0.000000000000000 	0.000000000000000 	1.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 
0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	1.000000000000000 	0.000000000000000 
0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	1.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 
0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	1.000000000000000 	0.000000000000000 	0.584675792724543 	0.527073185249735 	0.000000000000000 	0.000000000000000 	0.000000000000000 
0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	1.000000000000000 
0.000000000000000 	1.000000000000000 	0.790292264609525 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 
0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	1.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 
1.000000000000000 	0.772218309869749 	0.353908662732461 	0.416299117151281 	0.434151784294243 	0.254522575451673 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 
1.000000000000000 	0.920042215569341 	0.499872107389307 	0.433492383206415 	0.407751642752445 	0.193247220947242 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 
0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	1.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 
0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	1.000000000000000 	0.000000000000000 	0.000000000000000 
0.000000000000000 	1.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 
0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	-1.000000000000000 
0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	-1.000000000000000 	0.000000000000000 	0.000000000000000 	-0.752984746611922 	0.000000000000000 	0.000000000000000 	0.000000000000000 
0.800214360091464 	0.842626507838925 	1.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 
0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	1.000000000000000 	0.000000000000000 	0.883364231854034 	0.661655834980765 	0.000000000000000 
0.000000000000000 	1.000000000000000 	0.000000000000000 	0.386220975366964 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 
0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	-1.000000000000000 	0.000000000000000 
0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	1.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 
0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	-1.000000000000000 	0.000000000000000 	-0.963093955417675 	0.000000000000000 	-0.495848679242209 	0.000000000000000 	0.000000000000000 	-0.862604808368509 
0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	1.000000000000000 	0.000000000000000 	0.000000000000000 	0.891660114540534 	0.000000000000000 	0.000000000000000 	0.000000000000000 
0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	-1.000000000000000 
0.000000000000000 	0.000000000000000 	0.239350236024369 	0.000000000000000 	0.000000000000000 	1.000000000000000 	0.779487491577649 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 	0.000000000000000 
];


R   = [
0.664523010927203 	0.014319300186361 	0.526932812154373 
0.449716156971073 	0.867294506255676 	0.001842293661066 
0.057688255933470 	0.122766259932756 	0.037053256631141 
0.750142030061787 	0.010902813593440 	0.565616470926539 
0.003328847445982 	0.523305140949353 	0.547093993987221 
0.551291076482088 	0.002178674768326 	0.137086318442618 
0.599439082518297 	0.085439951453629 	0.173179961939408 
0.855018782695022 	0.062637607903122 	0.070286626300377 
0.875942588640889 	0.024244161245852 	0.020834623347870 
0.686101306130651 	0.445468324693292 	0.296924421626532 
0.889743142079161 	0.334245929541195 	0.039470056640137 
0.938387920154477 	0.000332946945646 	0.064289981646654 
0.280840526486104 	0.076677599359732 	0.505892326501553 
0.021765307545730 	0.030490168358827 	0.002341708189376 
0.840037946804409 	0.123925495495724 	0.024072065899559 
0.845725301530152 	0.107388655849517 	0.008203796097754 
0.235544214874295 	0.337780871581748 	0.024846321527033 
0.038287751106252 	0.046928538356162 	0.798245374436929 
0.212378657858184 	0.097903977258569 	0.487072816972071 
0.489069655504934 	0.295986780158667 	0.260635325140627 
0.208096801845766 	0.001669672180606 	0.013958275118542 
0.061134843739233 	0.015365901128604 	0.049036941415838 
0.633284838633088 	0.722235171485683 	0.000320250741301 
];


celltype    = {
    'PreM-ex'
    'PreM-ex'
    'PreM-ex'
    'PreM-ex'
    'PreM-ex'
    'PreM-ex'
    'PreM-ex'
    'PreM-ex'
    'PreM-ex'
    'PreM-ex'
    'PreM-ex'
    'PreM-ex'
    'PreM-in'
    'PreM-in'
    'PreM-ex'
    'PreM-ex'
    'PreM-ex'
    'PreM-in'
    'PreM-ex'
    'PreM-in'
    'PreM-ex'
    'PreM-in'
    'PreM-ex'
};


animal  ={
    'Aoba'
    'Aoba'
    'Aoba'
    'Aoba'
    'Eito'
    'Eito'
    'Eito'
    'Eito'
    'Eito'
    'Eito'
    'Eito'
    'Eito'
    'Eito'
    'Eito'
    'Eito'
    'Eito'
    'Eito'
    'Eito'
    'Eito'
    'Eito'
    'Eito'
    'Eito'
    'Eito'    
};

%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%


if(isempty(animal_filt))
    animal_ind  = true(size(animal));
else
    animal_ind  = ismember(animal,animal_filt);
end

if(isempty(celltype_filt))
    celltype_ind  = true(size(celltype));
else
    celltype_ind  = ismember(celltype,celltype_filt);
end

filt_ind = animal_ind & celltype_ind;

W{1}    = W{1}(filt_ind,:);
W{2}    = W{2}(filt_ind,:);
W{3}    = W{3}(filt_ind,:);

MPI     = MPI(filt_ind,:);
R       = R(filt_ind,:);


%%%%%%%%%%%%%%%%%%%%%%%%%%%

[nrow,ncol] = size(MPI);

nW          = length(W);

% m       = nan(1,nrep);
% mvec    = nan(nrow,nrep);

rMPI        = cell(nrep,1);
CA          = cell(nrep,1);
Ind         = cell(nrep,1);
sortCA      = cell(nrep,1);

CA_act      = nan(nrow,nW);
sortCA_act  = nan(nrow,nW);
Ind_act     = nan(nrow,nW);

mean_sortCA = nan(nrep,nW);
sd_sortCA   = nan(nrep,nW);
mean_nonPrefCA  =  nan(nrep,1);
sd_nonPrefCA    =  nan(nrep,1);


sortR       = cell(nrep,1);
mean_sortR  = nan(nrep,nW);
sd_sortR    = nan(nrep,nW);

mean_nonPrefR  =  nan(nrep,1);
sd_nonPrefR    =  nan(nrep,1);


for irow=1:nrow
    for iW=1:nW
        x   = W{iW}(irow,:);
        y   = MPI(irow,:);
        CA_act(irow,iW) = dot(x,y)/(norm(x)*norm(y));
        %     CA_act(irow,iW) = dot(x,y);
    end
    [sortCA_act(irow,:),Ind_act(irow,:)]    = sort(abs(CA_act(irow,:)),'descend');
end

if(abs_flag)
    disp('abs: on')
else
    disp('abs: off')
end



switch method
    case 'within'
        randreset(randset);
        for irep=1:nrep
            rMPI{irep}  = nan(nrow,ncol);
            CA{irep}     = nan(nrow,nW);
            sortCA{irep}    = nan(nrow,nW);
            Ind{irep}   = nan(nrow,nW);
            for irow=1:nrow
                rMPI{irep}(irow,:)  = MPI(irow,randperm(ncol));
                for iW=1:nW
                    x   = W{iW}(irow,:);
                    y   = rMPI{irep}(irow,:);
                    CA{irep}(irow,iW)= dot(x,y)/(norm(x)*norm(y));
                end
                if(abs_flag)
                    [sortCA{irep}(irow,:),Ind{irep}(irow,:)]    = sort(abs(CA{irep}(irow,:)),'descend');
                else
                    [sortCA{irep}(irow,:),Ind{irep}(irow,:)]    = sort(CA{irep}(irow,:),'descend');
                end
            end
            
            %     [m(irep),mvec(:,irep)] = meanangle(W,MPI2);
            indicator(irep,nrep);
        end
        indicator(0,0)
        
    case 'between'
        randreset(randset);
        for irep=1:nrep
            CA{irep}     = nan(nrow,nW);
            sortCA{irep}    = nan(nrow,nW);
            Ind{irep}   = nan(nrow,nW);
            
            temp = reshape(MPI(randperm(numel(MPI))),nrow,ncol);

            rMPI{irep}  = temp;
            
            for irow=1:nrow
                %                 rMPI{irep}(irow,:)  = MPI(irow,randperm(ncol));
                for iW=1:nW
                    x   = W{iW}(irow,:);
                    y   = rMPI{irep}(irow,:);
                    CA{irep}(irow,iW)   = dot(x,y)/(norm(x)*norm(y));
                                            
                    %                     CA{irep}(irow,iW)= dot(x,y);
                end
                if(abs_flag)
                    [sortCA{irep}(irow,:),Ind{irep}(irow,:)]    = sort(abs(CA{irep}(irow,:)),'descend');
                else
                    [sortCA{irep}(irow,:),Ind{irep}(irow,:)]    = sort(CA{irep}(irow,:),'descend');
                end
            end
            
            %     [m(irep),mvec(:,irep)] = meanangle(W,MPI2);
            indicator(irep,nrep);
        end
        indicator(0,0)
        
    case 'between_nonzero'
        randreset(randset);
        for irep=1:nrep
            CA{irep}     = nan(nrow,nW);
            sortCA{irep}    = nan(nrow,nW);
            Ind{irep}   = nan(nrow,nW);
            
            temp=0;
            while(any(sum(temp,2)==0))
                temp = reshape(MPI(randperm(numel(MPI))),nrow,ncol);
            end
            rMPI{irep}  = temp;
            
            for irow=1:nrow
                %                 rMPI{irep}(irow,:)  = MPI(irow,randperm(ncol));
                for iW=1:nW
                    x   = W{iW}(irow,:);
                    y   = rMPI{irep}(irow,:);
                    CA{irep}(irow,iW)= dot(x,y)/(norm(x)*norm(y));
                    %                     CA{irep}(irow,iW)= dot(x,y);
                end
                if(abs_flag)
                    [sortCA{irep}(irow,:),Ind{irep}(irow,:)]    = sort(abs(CA{irep}(irow,:)),'descend');
                else
                    [sortCA{irep}(irow,:),Ind{irep}(irow,:)]    = sort(CA{irep}(irow,:),'descend');
                end
            end
            
            %     [m(irep),mvec(:,irep)] = meanangle(W,MPI2);
            indicator(irep,nrep);
        end
        indicator(0,0)
        
    case 'between_zeropad'
        randreset(randset);
        for irep=1:nrep
            CA{irep}     = nan(nrow,nW);
            sortCA{irep}    = nan(nrow,nW);
            Ind{irep}   = nan(nrow,nW);
            
            temp = reshape(MPI(randperm(numel(MPI))),nrow,ncol);

            rMPI{irep}  = temp;
            
            for irow=1:nrow
                %                 rMPI{irep}(irow,:)  = MPI(irow,randperm(ncol));
                for iW=1:nW
                    x   = W{iW}(irow,:);
                    y   = rMPI{irep}(irow,:);
                    CA{irep}(irow,iW)   = dot(x,y)/(norm(x)*norm(y));
                    if(isnan(CA{irep}(irow,iW)))
                        CA{irep}(irow,iW)   = 0;
                    end
                                            
                    %                     CA{irep}(irow,iW)= dot(x,y);
                end
                if(abs_flag)
                    [sortCA{irep}(irow,:),Ind{irep}(irow,:)]    = sort(abs(CA{irep}(irow,:)),'descend');
                else
                    [sortCA{irep}(irow,:),Ind{irep}(irow,:)]    = sort(CA{irep}(irow,:),'descend');
                end
            end
            
            %     [m(irep),mvec(:,irep)] = meanangle(W,MPI2);
            indicator(irep,nrep);
        end
        indicator(0,0)
        
    case 'draw'
        randreset(randset);
        for irep=1:nrep
            CA{irep}        = nan(nrow,nW);
            sortCA{irep}    = nan(nrow,nW);
            Ind{irep}       = nan(nrow,nW);
            
            rMPI{irep}  = nan(nrow,ncol);
            
            for irow=1:nrow
%                 temp=0;
%                 while(sum(temp)==0)
                    temp    = MPI(randi([1 numel(MPI)],1,ncol));
%                 end
                rMPI{irep}(irow,:)  = temp;
            end
            
            for irow=1:nrow
                %                 rMPI{irep}(irow,:)  = MPI(irow,randperm(ncol));
                for iW=1:nW
                    x   = W{iW}(irow,:);
                    y   = rMPI{irep}(irow,:);
                    CA{irep}(irow,iW)= dot(x,y)/(norm(x)*norm(y));
                    %                     CA{irep}(irow,iW)= dot(x,y);
                end
                if(abs_flag)
                    [sortCA{irep}(irow,:),Ind{irep}(irow,:)]    = sort(abs(CA{irep}(irow,:)),'descend');
                else
                    [sortCA{irep}(irow,:),Ind{irep}(irow,:)]    = sort(CA{irep}(irow,:),'descend');
                end
            end
            
            %     [m(irep),mvec(:,irep)] = meanangle(W,MPI2);
            indicator(irep,nrep);
        end
        indicator(0,0)
        
    case 'draw_nonzero'
        randreset(randset);
        for irep=1:nrep
            CA{irep}        = nan(nrow,nW);
            sortCA{irep}    = nan(nrow,nW);
            Ind{irep}       = nan(nrow,nW);
            
            rMPI{irep}  = nan(nrow,ncol);
            
            for irow=1:nrow
                temp=0;
                while(sum(temp)==0)
                    temp    = MPI(randi([1 numel(MPI)],1,ncol));
                end
                rMPI{irep}(irow,:)  = temp;
            end
            
            for irow=1:nrow
                %                 rMPI{irep}(irow,:)  = MPI(irow,randperm(ncol));
                for iW=1:nW
                    x   = W{iW}(irow,:);
                    y   = rMPI{irep}(irow,:);
                    CA{irep}(irow,iW)= dot(x,y)/(norm(x)*norm(y));
                    %                     CA{irep}(irow,iW)= dot(x,y);
                end
                if(abs_flag)
                    [sortCA{irep}(irow,:),Ind{irep}(irow,:)]    = sort(abs(CA{irep}(irow,:)),'descend');
                else
                    [sortCA{irep}(irow,:),Ind{irep}(irow,:)]    = sort(CA{irep}(irow,:),'descend');
                end
            end
            
            %     [m(irep),mvec(:,irep)] = meanangle(W,MPI2);
            indicator(irep,nrep);
        end
        indicator(0,0)
        
    case 'draw_zeropad'
        randreset(randset);
        for irep=1:nrep
            CA{irep}        = nan(nrow,nW);
            sortCA{irep}    = nan(nrow,nW);
            Ind{irep}       = nan(nrow,nW);
            
            rMPI{irep}  = nan(nrow,ncol);
            
            for irow=1:nrow
%                 temp=0;
%                 while(sum(temp)==0)
                    temp    = MPI(randi([1 numel(MPI)],1,ncol));
%                 end
                rMPI{irep}(irow,:)  = temp;
            end
            
            for irow=1:nrow
                %                 rMPI{irep}(irow,:)  = MPI(irow,randperm(ncol));
                for iW=1:nW
                    x   = W{iW}(irow,:);
                    y   = rMPI{irep}(irow,:);
                    CA{irep}(irow,iW)= dot(x,y)/(norm(x)*norm(y));
                    if(isnan(CA{irep}(irow,iW)))
                        CA{irep}(irow,iW)   = 0;
                    end
                    
                    %                     CA{irep}(irow,iW)= dot(x,y);
                end
                if(abs_flag)
                    [sortCA{irep}(irow,:),Ind{irep}(irow,:)]    = sort(abs(CA{irep}(irow,:)),'descend');
                else
                    [sortCA{irep}(irow,:),Ind{irep}(irow,:)]    = sort(CA{irep}(irow,:),'descend');
                end
            end
            
            %     [m(irep),mvec(:,irep)] = meanangle(W,MPI2);
            indicator(irep,nrep);
        end
        indicator(0,0)
        
        
    case 'randn'
        randreset(randset);
        
        M   = mean(reshape(MPI,numel(MPI),1));
        S   = std(reshape(MPI,numel(MPI),1));
        
        for irep=1:nrep
            CA{irep}        = nan(nrow,nW);
            sortCA{irep}    = nan(nrow,nW);
            Ind{irep}       = nan(nrow,nW);
            
            rMPI{irep}  = nan(nrow,ncol);
            
            for irow=1:nrow
%                 temp=0;
%                 while(norm(temp)==0)
                    temp    = M + S.*randn(1,ncol);
%                 end
                rMPI{irep}(irow,:)  = temp;
            end
            
            for irow=1:nrow
                %                 rMPI{irep}(irow,:)  = MPI(irow,randperm(ncol));
                for iW=1:nW
                    x   = W{iW}(irow,:);
                    y   = rMPI{irep}(irow,:);
                    CA{irep}(irow,iW)= dot(x,y)/(norm(x)*norm(y));
                    %                     CA{irep}(irow,iW)= dot(x,y);
                end
                if(abs_flag)
                    [sortCA{irep}(irow,:),Ind{irep}(irow,:)]    = sort(abs(CA{irep}(irow,:)),'descend');
                else
                    [sortCA{irep}(irow,:),Ind{irep}(irow,:)]    = sort(CA{irep}(irow,:),'descend');
                end
            end
            
            %     [m(irep),mvec(:,irep)] = meanangle(W,MPI2);
            indicator(irep,nrep);
        end
        indicator(0,0)
        
    otherwise
        disp(['Method is not defined: ',method])
        return
end


for irep=1:nrep
    mean_sortCA(irep,:) = nanmean(sortCA{irep},1);
    sd_sortCA(irep,:)   = nanstd(sortCA{irep},1,1);
    
    mean_nonPrefCA(irep)= nanmean([sortCA{irep}(:,2);sortCA{irep}(:,3)],1);
    sd_nonPrefCA(irep)  = nanstd([sortCA{irep}(:,2);sortCA{irep}(:,3)],1,1);
end


for irep=1:nrep
    sortR{irep} = nan(nrow,nW);
    for irow=1:nrow
        sortR{irep}(irow,:) = R(irow,Ind{irep}(irow,:));
    end
    mean_sortR(irep,:)  = nanmean(sortR{irep},1);
    sd_sortR(irep,:)    = nanstd(sortR{irep},1,1);
    
    mean_nonPrefR(irep) = nanmean([sortR{irep}(:,2);sortR{irep}(:,3)],1);
    sd_nonPrefR(irep)   = nanstd([sortR{irep}(:,2);sortR{irep}(:,3)],1,1);
end





end




% function [a,avec]   = meanangle(W,MPI)
% nW      = 3;
% nrow    = size(MPI,1);
%
% amtx    = nan(nrow,nW);
%
% for irow=1:nrow
%     for iW=1:nW
%         x   = squeeze(MPI(irow,:));
%         y   = squeeze(W(iW,irow,:));
%
%         amtx(irow,iW)   = abs(dot(x,y)/norm(x)/norm(y));
%     end
% end
% avec    = max(amtx,[],2);
% a       = mean(avec);
%
%
%
% end
