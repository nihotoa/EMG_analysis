function [Amplitudes, Amplitudes2, Amplitudes3, Areas, Areas2,Amplitudes_ave, Amplitudes2_ave, Amplitudes3_ave, Areas_ave, Areas2_ave] = peakareas2(BaseRange, TimeRange, PeakTime, InflectionTime, TroughTime, Display_opt)% [Amplitudes, Amplitudes2, Amplitudes3, Areas, Areas2,Amplitudes_ave, Amplitudes2_ave, Amplitudes3_ave, Areas_ave, Areas2_ave] = PeakAreas2(BaseRange, TimeRange, PeakTime, InflectionTime, TroughTime, Display_opt)% All times are in milliseconds offset from the analysis trigger time.%% BaseLineRange -- An array of two times [b1,b2], b1<b2. (e.g [-0.25, -0.14] ) used to calculate a baseline mean measurement on each trial for use in the area calculations.% TimeRange -- An array of two times [t1,t2], t1<t2. used to locate the entire rise-fall-return or fall-rise return.% PeakTime -- Time where the peak occurs.  If there is no peak, this should be TimeRange(2).% InflectionTime -- Time delineating the peak and the trough. If there is no trough or peak (monophasic signal), this should be TimeRange(2).% TroughTime -- Time where trough occurs.  If there is no trough, this should be TimeRange(2).%% For each trial in an analysis one line will be written to the output file with the following values:% Amplitudes  = (Value at PeakTime - Value at TroughTime)% Amplitudes2 = Maximum value in TimeRange - Minimum value in TimeRange% Amplitudes3 = (Mean of 3 bins at PeakTime - Mean of 3 bins at TroughTime)% if PeakTime <= TroughTime%   Areas =  (InflectionTime - TimeRange(1)) * Mean(BinValue(t) - BaseLineMean) for TimeRange(1) <= t < InflectionTime%           + (TimeRange(2) - InflectionTime) * Mean(BaseLineMean - BinValue(u)) for InflectionTime <= u < TimeRange(2)% if TroughTime < PeakTime%   Areas =  (InflectionTime - TimeRange(1)) * Mean(BaseLineMean - BinValue(t)) for TimeRange(1) <= t < InflectionTime%           + (TimeRange(2) - InflectionTime) * Mean(BinValue(u) - BaseLineMean) for InflectionTime <= u < TimeRange(2)% Areas2 = Sum of Abs(BinValue(t) - BaseLineMean) for TimeRange(1) <= t < TimeRange(2)%% In addition, the bin averages at the specified times (PeakTime, InflectionTime and TroughTime) will be printed to the command line.% It will also display means for the bins adjacent to all the specified times so that you can double check that you selected good values% for these times. Once all the amplitudes and areas are calculated, the built in Matlab tools can be used to compare against the% amplitudes and areas from another analysis.  An appropriate file name is choosen and an output file is written to C:\data\export\peakareas\<expname>-PA.txt% Check Parametersif(nargin<6)    Display_opt = 0;endnstd        = 2;XLimValue   = [1 4.5];AnalysisObjects = gsma;nAnalyses = length(AnalysisObjects);if nAnalyses < 1   disp('PeakAreas: No selected analysis -- nothing to do')   return;enddisp('----------------------');for ana = 1:nAnalyses      anaTrials = [];   Amplitudes = {};   AmpP = {};   AmpT = {};   Amplitudes2 = {};   Amp2P = {};   Amp2T = {};   Amplitudes3 = {};   Amp3P = {};   Amp3T = {};   Amplitudes4 = {};   Amp4P = {};   Amp4T = {};   Areas = {};   Areas2 = {};   Amp2PeakTime = {};   Amp2TroughTime = {};   times = {};   AreasP = {};   AreasT = {};   Areas2P = {};   Areas2T = {};   % added by Takei 20100215   % >>   MeanAreasP = {};   MeanAreasT = {};   MeanAreas2P = {};   MeanAreas2T = {};      Amplitudes_ave = {};   AmpP_ave = {};   AmpT_ave = {};   Amplitudes2_ave = {};   Amp2P_ave = {};   Amp2T_ave = {};   Amplitudes3_ave = {};   Amp3P_ave = {};   Amp3T_ave = {};   Amplitudes4_ave = {};   Amp4P_ave = {};   Amp4T_ave = {};   Areas_ave = {};   Areas2_ave = {};   Amp2PeakTime_ave = {};   Amp2TroughTime_ave = {};   % times = {};   nTrials_ave  = {};   AreasP_ave = {};   AreasT_ave = {};   Areas2P_ave = {};   Areas2T_ave = {};   MeanAreasP_ave = {};   MeanAreasT_ave = {};   MeanAreas2P_ave = {};   MeanAreas2T_ave = {};   % <<      analysisName = get(AnalysisObjects(ana), 'Name');   AnalysesComponents = analyses(AnalysisObjects(ana), 'componentobjs');   nAnalysesComponents = length(AnalysesComponents);   if nAnalysesComponents == 0      disp(['PeakAreas: No components to do: ' analysisName]);      break;   end         if (length(BaseRange) ~= 2) || (BaseRange(1) > BaseRange(2))      disp('AnalysisStats: BaseRange must be a 2 element array containing a start and stop time in milliseconds.');      return;   end      % Caculate statistics      maxTrials = 0;   for i = 1:nAnalysesComponents      analysisType = get(AnalysesComponents(i), 'SubClass');      TimeUnits = get(AnalysesComponents(i), 'TimeUnits');      YDataUnits = get(AnalysesComponents(i), 'YUnits');      ConversionFactor = units('conversionfactor', 'time', TimeUnits, 'milliseconds');           WindowStart = get(AnalysesComponents(i), 'WindowStart') * ConversionFactor;      WindowStop = get(AnalysesComponents(i), 'WindowStop') * ConversionFactor;                   trialData = get(AnalysesComponents(i), 'TrialData');      trialTimes = get(AnalysesComponents(i), 'TrialTriggerTime');      nTotalTrials = get(AnalysesComponents(i), 'TrialCount');      nTrials = size(trialData, 1);      % added by Takei 20100215      % >>      TrialsToUse   = get(AnalysesComponents(i), 'TrialsToUse');      if(isempty(TrialsToUse))          TrialsToUse   = [1:nTrials];      end            nTrials       = length(TrialsToUse);      nTrials_ave{i}    = nTrials;      trialData     = trialData(TrialsToUse,:);      trialTimes    = trialTimes(TrialsToUse);            % <<            name = get(AnalysesComponents(i), 'Name');             if (nTrials < 1)           disp(['Warning: Too few stored trials in ' analysysName ' : ' name]);           continue;      end      if (nTrials < nTotalTrials)          disp(['Warning: There are fewer stored trials than averaged trials in ' analysysName ' : ' name]);      end            % modified by Takei20100215      %>>      %yData = get(AnalysesComponents(i), 'YData');       yData = mean(trialData,1);      %<<            xData = get(AnalysesComponents(i), 'XData') * ConversionFactor;      binWidth = xData(2) - xData(1);      nPoints = length(yData);          baseBin1 = round((BaseRange(1) - xData(1)) / binWidth) + 1;      baseBin2 = round((BaseRange(2) - xData(1)) / binWidth) + 1;%      baseBin2 = baseBin1 + ceil((BaseRange(2) - BaseRange(1)) / binWidth) - 1;         if (baseBin2 < baseBin1)         baseBin2 = baseBin1;       end      if (baseBin1 < 1) || (baseBin2 > nPoints)         disp(['PeakValue: BaseRange out of range: ' analysisName '-' name]);         return;      end      timeBin1 = round((TimeRange(1) - xData(1)) / binWidth) + 1;      timeBin2 = round((TimeRange(2) - xData(1)) / binWidth) + 1;%      timeBin2 = timeBin1 + ceil((TimeRange(2) - TimeRange(1)) / binWidth) - 1;         if (timeBin2 < timeBin1)         timeBin2 = timeBin1;       end      if (timeBin1 < 1) || (timeBin2 > nPoints)         disp(['PeakValue: TimeRange out of range: ' analysisName '-' name]);         return;      end            peakTimeBin = round((PeakTime - xData(1)) / binWidth) + 1;      if (peakTimeBin <= 1) | (peakTimeBin >= nPoints)         disp(['PeakValue: Peak out of range: ' analysisName '-' name]);         return;      end      inflectionTimeBin = round((InflectionTime - xData(1)) / binWidth) + 1;      if (inflectionTimeBin <= 1) | (inflectionTimeBin >= nPoints)         disp(['PeakValue: Inflection out of range: ' analysisName '-' name]);         return;      end            troughTimeBin = round((TroughTime - xData(1)) / binWidth) + 1;      if (troughTimeBin <= 1) || (troughTimeBin >= nPoints)         disp(['PeakValue: TroughTime out of range: ' analysisName '-' name]);         return;      end       % peakTime must be between timeBin1 and timeBin2      if ((peakTimeBin > timeBin1) && (peakTimeBin > timeBin2)) || ((peakTimeBin < timeBin1) && (peakTimeBin < timeBin2))          disp(['PeakValue: peakTime out of range: ' analysisName '-' name]);          return;      end            % troughTime must be between timeBin1 and timeBin2      if ((troughTimeBin > timeBin1) && (troughTimeBin > timeBin2)) || ((troughTimeBin < timeBin1) && (troughTimeBin < timeBin2))          disp(['PeakValue: troughTime out of range: ' analysisName '-' name]);          return;      end      % inflectionTime must be between peakTime and troughTime      if ((inflectionTimeBin > peakTimeBin) && (inflectionTimeBin > troughTimeBin)) || ((inflectionTimeBin < peakTimeBin) && (inflectionTimeBin < troughTimeBin))          disp(['PeakValue: InflectionTime out of range: ' analysisName '-' name]);          return;      end            if (peakTimeBin <= troughTimeBin)        peakTimeWidth = binWidth * (inflectionTimeBin - timeBin1);        troughTimeWidth = binWidth * (timeBin2 - inflectionTimeBin);      else        troughTimeWidth = binWidth * (inflectionTimeBin - timeBin1);        peakTimeWidth = binWidth * (timeBin2 - inflectionTimeBin);      end      timeRangeWidth = binWidth * (timeBin2 - timeBin1);      peak = [0 0 0 0 0 0 0];      inflection = [0 0 0 0 0 0 0];      trough = [0 0 0 0 0 0 0];            anaTrials(i) = nTrials;      if nTrials > maxTrials          maxTrials = nTrials;      end            for j = 1:nTrials        trial = double(trialData(j, :));          basemean = mean(trial(baseBin1:baseBin2-1));        basestd  = std(trial(baseBin1:baseBin2-1));        peakmean = mean(trial(timeBin1:timeBin2-1));        Amplitudes{i}(j) = trial(peakTimeBin) - trial(troughTimeBin);        AmpP{i}(j) = trial(peakTimeBin) - basemean;        AmpT{i}(j) = basemean - trial(troughTimeBin);                AreasP{i}(j) = 0;             AreasT{i}(j) = 0;         MeanAreasP{i}(j) = 0;   % added by Takei 20100221        MeanAreasT{i}(j) = 0;   % added by Takei 20100221         if (peakTimeBin <= troughTimeBin)   % posi-nega          if peakTimeWidth > 0   % is posi              AreasP{i}(j)      = peakTimeWidth * mean(trial(timeBin1:inflectionTimeBin-1) - basemean);              MeanAreasP{i}(j)  = mean(trial(timeBin1:inflectionTimeBin-1) - basemean);   % added by Takei 20100221          end          if troughTimeWidth > 0   % is nega              AreasT{i}(j)      = troughTimeWidth * mean(basemean - trial(inflectionTimeBin:timeBin2-1));               MeanAreasT{i}(j)  = mean(basemean - trial(inflectionTimeBin:timeBin2-1));   % added by Takei 20100221           end        else   % nega-posi          if troughTimeWidth > 0   % is nega            AreasT{i}(j)        = troughTimeWidth * mean(basemean - trial(timeBin1:inflectionTimeBin-1));              MeanAreasT{i}(j)    = mean(basemean - trial(timeBin1:inflectionTimeBin-1));   % added by Takei 20100221          end          if peakTimeWidth > 0    % is posi            AreasP{i}(j)        = peakTimeWidth * mean(trial(inflectionTimeBin:timeBin2-1) - basemean);               MeanAreasP{i}(j)    = mean(trial(inflectionTimeBin:timeBin2-1) - basemean);   % added by Takei 20100221          end        end        Areas{i}(j)     = AreasP{i}(j) + AreasT{i}(j);        MeanAreas{i}(j) = MeanAreasP{i}(j) + MeanAreasT{i}(j);   % added by Takei 20100221        Areas2P{i}(j) = 0;             MeanAreas2P{i}(j) = 0;   % added by Takei 20100221             Areas2T{i}(j) = 0;           MeanAreas2T{i}(j) = 0;   % added by Takei 20100221                   if (peakTimeBin <= troughTimeBin)          if peakTimeWidth > 0              Areas2P{i}(j)     = peakTimeWidth * mean(abs(trial(timeBin1:inflectionTimeBin-1) - basemean));               MeanAreas2P{i}(j) = mean(abs(trial(timeBin1:inflectionTimeBin-1) - basemean));    % added by Takei 20100221          end          if troughTimeWidth > 0            Areas2T{i}(j)       = troughTimeWidth * mean(abs(basemean - trial(inflectionTimeBin:timeBin2-1)));               MeanAreas2T{i}(j)   = mean(abs(basemean - trial(inflectionTimeBin:timeBin2-1)));      % added by Takei 20100221          end        else          if troughTimeWidth > 0              Areas2T{i}(j)     = troughTimeWidth * mean(abs(basemean - trial(timeBin1:inflectionTimeBin-1)));                 MeanAreas2T{i}(j) = mean(abs(basemean - trial(timeBin1:inflectionTimeBin-1)));      % added by Takei 20100221          end          if peakTimeWidth > 0              Areas2P{i}(j)     = peakTimeWidth * mean(abs(trial(inflectionTimeBin:timeBin2-1) - basemean));                    MeanAreas2P{i}(j) = mean(abs(trial(inflectionTimeBin:timeBin2-1) - basemean));      % added by Takei 20100221             end        end        Areas2{i}(j)        = timeRangeWidth * mean(abs(trial(timeBin1:timeBin2-1) - basemean));        MeanAreas2{i}(j)    = mean(abs(trial(timeBin1:timeBin2-1) - basemean));   % added by Takei 20100221        [maximum, index] = max(trial(timeBin1:timeBin2));                Amp2PeakTime{i}(j) = TimeRange(1) + binWidth * (index - 1);        [minimum, index] = min(trial(timeBin1:timeBin2));        Amp2TroughTime{i}(j) = TimeRange(1) + binWidth * (index - 1);        Amplitudes2{i}(j) = maximum - minimum;        Amp2P{i}(j) = maximum - basemean;        Amp2T{i}(j) = basemean - minimum;                Amp3P{i}(j) = mean(trial(peakTimeBin-1:peakTimeBin+1)) - basemean;        Amp3T{i}(j) = basemean - mean(trial(troughTimeBin-1:troughTimeBin+1));        Amplitudes3{i}(j) = Amp3P{i}(j) + Amp3T{i}(j);         Amp4P{i}(j) = max(trial(peakTimeBin-1:peakTimeBin+1)) - basemean;        Amp4T{i}(j) = basemean - min(trial(troughTimeBin-1:troughTimeBin+1));        Amplitudes4{i}(j) = Amp4P{i}(j) + Amp4T{i}(j);               times{i}(j) = trialTimes(j);        peak = peak + trial(peakTimeBin-3:peakTimeBin+3);        inflection = inflection + trial(inflectionTimeBin-3:inflectionTimeBin+3);        trough = trough + trial(troughTimeBin-3:troughTimeBin+3);      end            % added by Takei 20100215      %>>            trial = double(yData);      basemean = mean(trial(baseBin1:baseBin2-1));      basestd  = std(trial(baseBin1:baseBin2-1));      peakmean = mean(trial(timeBin1:timeBin2-1));      Amplitudes_ave{i}   = trial(peakTimeBin) - trial(troughTimeBin);      AmpP_ave{i} = trial(peakTimeBin) - basemean;      AmpT_ave{i} = basemean - trial(troughTimeBin);      AreasP_ave{i} = 0;      AreasT_ave{i} = 0;      MeanAreasP_ave{i} = 0;      MeanAreasT_ave{i} = 0;      if (peakTimeBin <= troughTimeBin)          if peakTimeWidth > 0              AreasP_ave{i} = peakTimeWidth * mean(trial(timeBin1:inflectionTimeBin-1) - basemean);              MeanAreasP_ave{i} = mean(trial(timeBin1:inflectionTimeBin-1) - basemean);          end          if troughTimeWidth > 0              AreasT_ave{i} = troughTimeWidth * mean(basemean - trial(inflectionTimeBin:timeBin2-1));              MeanAreasT_ave{i} = mean(basemean - trial(inflectionTimeBin:timeBin2-1));          end      else          if troughTimeWidth > 0              AreasT_ave{i} = troughTimeWidth * mean(basemean - trial(timeBin1:inflectionTimeBin-1));              MeanAreasT_ave{i} = mean(basemean - trial(timeBin1:inflectionTimeBin-1));          end          if peakTimeWidth > 0              AreasP_ave{i} = peakTimeWidth * mean(trial(inflectionTimeBin:timeBin2-1) - basemean);              MeanAreasP_ave{i} = mean(trial(inflectionTimeBin:timeBin2-1) - basemean);          end      end      Areas_ave{i}  = AreasP_ave{i} + AreasT_ave{i};      MeanAreas_ave{i}  = MeanAreasP_ave{i} + MeanAreasT_ave{i};      Areas2P_ave{i} = 0;      Areas2T_ave{i} = 0;      MeanAreas2P_ave{i} = 0;      MeanAreas2T_ave{i} = 0;      if (peakTimeBin <= troughTimeBin)          if peakTimeWidth > 0              Areas2P_ave{i} = peakTimeWidth * mean(abs(trial(timeBin1:inflectionTimeBin-1) - basemean));              MeanAreas2P_ave{i} = peakTimeWidth * mean(abs(trial(timeBin1:inflectionTimeBin-1) - basemean));          end          if troughTimeWidth > 0              Areas2T_ave{i} = troughTimeWidth * mean(abs(basemean - trial(inflectionTimeBin:timeBin2-1)));              MeanAreas2T_ave{i} = troughTimeWidth * mean(abs(basemean - trial(inflectionTimeBin:timeBin2-1)));          end      else          if troughTimeWidth > 0              Areas2T_ave{i} = troughTimeWidth * mean(abs(basemean - trial(timeBin1:inflectionTimeBin-1)));              MeanAreas2T_ave{i} = troughTimeWidth * mean(abs(basemean - trial(timeBin1:inflectionTimeBin-1)));          end          if peakTimeWidth > 0              Areas2P_ave{i} = peakTimeWidth * mean(abs(trial(inflectionTimeBin:timeBin2-1) - basemean));              MeanAreas2P_ave{i} = peakTimeWidth * mean(abs(trial(inflectionTimeBin:timeBin2-1) - basemean));          end      end      Areas2_ave{i}     = timeRangeWidth * mean(abs(trial(timeBin1:timeBin2-1) - basemean));      MeanAreas2_ave{i} = mean(abs(trial(timeBin1:timeBin2-1) - basemean));      [maximum, index] = max(trial(timeBin1:timeBin2));      Amp2PeakTime_ave{i} = TimeRange(1) + binWidth * (index - 1);      [minimum, index] = min(trial(timeBin1:timeBin2));      Amp2TroughTime_ave{i} = TimeRange(1) + binWidth * (index - 1);      Amplitudes2_ave{i} = maximum - minimum;      Amp2P_ave{i} = maximum - basemean;      Amp2T_ave{i} = basemean - minimum;      Amp3P_ave{i} = mean(trial(peakTimeBin-1:peakTimeBin+1)) - basemean;      Amp3T_ave{i} = basemean - mean(trial(troughTimeBin-1:troughTimeBin+1));      Amplitudes3_ave{i} = Amp3P_ave{i} + Amp3T_ave{i};      Amp4P_ave{i} = max(trial(peakTimeBin-1:peakTimeBin+1)) - basemean;      Amp4T_ave{i} = basemean - min(trial(troughTimeBin-1:troughTimeBin+1));      Amplitudes4_ave{i} = Amp4P_ave{i} + Amp4T_ave{i};              % times{i}(j) = trialTimes(j);      % peak = peak + trial(peakTimeBin-3:peakTimeBin+3);      % inflection = inflection + trial(inflectionTimeBin-3:inflectionTimeBin+3);      % trough = trough + trial(troughTimeBin-3:troughTimeBin+3);      %<<            disp([analysisName,': ',name,',  binwidth = ',num2str(binWidth),',  TimeRangeWidth = ', num2str(timeRangeWidth)]);      peak = peak / nTrials;      inflection = inflection / nTrials;      trough = trough / nTrials;      fprintf('means:peak ');      fprintf('%9.2f ', peak);      fprintf('\ninflection ');      fprintf('%9.2f ', inflection);      fprintf('\ntrough     ');      fprintf('%9.2f ', trough);      fprintf('\n--------------------\n');            % added by Takei 20100215      %>>      TrialsToUse   = get(AnalysesComponents(i), 'TrialsToUse');      if(isempty(TrialsToUse))          fprintf('TrialsToUse(n=%d):',nTrials_ave{i});          fprintf('\n\t[]\n');      else            fprintf('TrialsToUse(n=%d):',nTrials_ave{i});          fprintf('\n\t%s\n',num2str(TrialsToUse));      end            if(Display_opt)          if(i==1)              fig   = figure('Name',analysisName,...                  'NumberTitle','off');          end          h = subplot(i,1,nAnalysesComponents,'Parent',fig);                              hold(h,'on')          if (peakTimeBin <= troughTimeBin)   % posi-nega              if peakTimeWidth > 0   % is posi                  c     = 'm';                  hL    = area(h,xData(timeBin1:inflectionTimeBin),yData(timeBin1:inflectionTimeBin),'BaseValue',basemean,'EdgeColor','none','FaceColor','none');                  set(hL,'EdgeColor',c,'FaceColor',c);              end              if troughTimeWidth > 0   % is nega                  c     = 'c';                  hL    = area(h,xData(inflectionTimeBin:timeBin2),yData(inflectionTimeBin:timeBin2),'BaseValue',basemean,'EdgeColor','none','FaceColor',c);                  set(hL,'EdgeColor',c,'FaceColor',c);              end          else   % nega-posi              if troughTimeWidth > 0   % is nega                  c     = 'c';                  hL    = area(h,xData(timeBin1:inflectionTimeBin),yData(timeBin1:inflectionTimeBin),'BaseValue',basemean,'EdgeColor','none','FaceColor','none');                  set(hL,'EdgeColor',c,'FaceColor',c);              end              if peakTimeWidth > 0    % is posi                  c     = 'm';                  hL    = area(h,xData(inflectionTimeBin:timeBin2),yData(inflectionTimeBin:timeBin2),'BaseValue',basemean,'EdgeColor','none','FaceColor',c);                  set(hL,'EdgeColor',c,'FaceColor',c);              end          end                    plot(h,xData([1,end]),repmat(basemean,1,2),'r-','MarkerFaceColor','r');          plot(h,xData([1,end]),repmat(basemean + nstd * basestd,1,2),'r-','MarkerFaceColor','r');          plot(h,xData([1,end]),repmat(basemean - nstd * basestd,1,2),'r-','MarkerFaceColor','r');          plot(h,xData(baseBin1),basemean,'r>','MarkerFaceColor','r');          plot(h,xData(baseBin2),basemean,'r<','MarkerFaceColor','r');          plot(h,xData(timeBin1),basemean,'b>','MarkerFaceColor','b');          plot(h,xData(timeBin2),basemean,'b<','MarkerFaceColor','b');          plot(h,xData(troughTimeBin),yData(troughTimeBin),'b^','MarkerFaceColor','b')          plot(h,xData(peakTimeBin),yData(peakTimeBin),'bv','MarkerFaceColor','b')          plot(h,xData(inflectionTimeBin),basemean,'bs','MarkerFaceColor','b')                              hL    = plot(h,xData,yData,'k-','LineWidth',1.0);                    ylim(h,[basemean - Amp2T_ave{i},Amp2P_ave{i} + basemean]);          xlim(h,XLimValue);          xlabel(h,'time(ms)')          ylabel(h,YDataUnits);                    name = get(AnalysesComponents(i), 'Name');           title({name,['n=',num2str(nTrials)]});                end      %<<   end   warning('off', 'MATLAB:MKDIR:DirectoryExists')   mkdir('C:\', 'data');   mkdir('C:\data\', 'export');   mkdir('C:\data\export\', 'peakareas');   warning('on', 'MATLAB:MKDIR:DirectoryExists')    OutputFileName = ['C:\data\export\peakareas\' analysisName '-PA.txt'];      % added by Takei 20100215   % >>      [OutputFileName,OutputDirName]   = uiputfile(OutputFileName,'Select a output file name.');   if(OutputFileName==0)       disp('User Press Cancel')       return;   end      OutputFileName       = fullfile(OutputDirName,OutputFileName);   [OutputDirName,OutputFileName,OutputFileExt] = fileparts(OutputFileName);        OutputFileName_ave   = fullfile(OutputDirName,[OutputFileName,'_ave',OutputFileExt]);   OutputFileName       = fullfile(OutputDirName,[OutputFileName,OutputFileExt]);   %<<      fid = fopen(OutputFileName, 'w'); % Test if header already written.   if (fid ~= -1)       %Write header       for i = 1:nAnalysesComponents           name = get(AnalysesComponents(i), 'Name');            %Write data           for j = 1:anaTrials(i);%BaseRange, TimeRange, PeakTime, InflectionTime, TroughTime,               if(i==1 && j==1)                   fprintf(fid, '\r\n'); % modified by Takei 20100215                   fprintf(fid, [['\r\nBaseRange\t',num2str(BaseRange,'%g')],['\tTimeRange\t',num2str(TimeRange,'%g')],['\tPeakTime\t',num2str(PeakTime,'%g')],['\tInflectionTime\t',num2str(InflectionTime,'%g')],['\tTroughTime\t',num2str(TroughTime,'%g')],['\tDate\t',datestr(now)]]); % modified by Takei 20100215                   fprintf(fid, ['\r\nComponent','\tTrial','\t(Sec)',['\tArea1(',YDataUnits,')'],['\tArea2(',YDataUnits,')'],['\tMeanArea1(',YDataUnits,')'],['\tMeanArea2(',YDataUnits,')']]); % modified by Takei 20100215               end               fprintf(fid, '\r\n%s\t%d\t%g\t%g\t%g\t%g\t%g', name, j, times{i}(j), Areas{i}(j), Areas2{i}(j), MeanAreas{i}(j), MeanAreas2{i}(j));                          end         end       fclose(fid);       disp(OutputFileName);    % added by Takei 20100215   end      % added by Takei 20100215   %>>   fid = fopen(OutputFileName_ave, 'w'); % Test if header already written.   if (fid ~= -1)       %Write header       for i = 1:nAnalysesComponents           if(i==1)               fprintf(fid, '\r\n'); % modified by Takei 20100215               fprintf(fid, [['\r\nBaseRange\t',num2str(BaseRange,'%g')],['\tTimeRange\t',num2str(TimeRange,'%g')],['\tPeakTime\t',num2str(PeakTime,'%g')],['\tInflectionTime\t',num2str(InflectionTime,'%g')],['\tTroughTime\t',num2str(TroughTime,'%g')],['\tDate\t',datestr(now)]]); % modified by Takei 20100215               fprintf(fid, ['\r\nComponent','\tTrialsToUse','\tnTrials',['\tArea1(',YDataUnits,')'],['\tArea2(',YDataUnits,')'],['\tMeanArea1(',YDataUnits,')'],['\tMeanArea2(',YDataUnits,')']]);           end           name = get(AnalysesComponents(i), 'Name');           TrialsToUse  = get(AnalysesComponents(i), 'TrialsToUse');           %Write data           if(isempty(TrialsToUse))               fprintf(fid, '\r\n%s\t%s\t%d\t%g\t%g\t%g\t%g', name, '[]', nTrials_ave{i}, Areas_ave{i}, Areas2_ave{i}, MeanAreas_ave{i}, MeanAreas2_ave{i});           else               fprintf(fid, '\r\n%s\t%s\t%d\t%g\t%g\t%g\t%g', name, num2str(TrialsToUse), nTrials_ave{i}, Areas_ave{i}, Areas2_ave{i}, MeanAreas_ave{i}, MeanAreas2_ave{i});           end       end       fclose(fid);       disp(OutputFileName_ave);   end   %<<   end