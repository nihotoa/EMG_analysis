function tfindpeaks% TFINDPEAKS3 ピークのdetection% ver.3.1% % written by TT 070130% Check ParametersBaseAna     = 1;    % # analysis for baseline calculation. %----------Set parameters-------------------BaseRange   = [-1000 -500];   %(ms)LValue      = 2;            % # times of Basestd% nn          = 5;            % (bin)% kk          = 3;            % (bin)nnms        = 100;            % (ms)kkms        = 60;            % (ms)filename    = 'c:\data\test.xls';testmethod  = 'ttest';      % 'signrank'alpha       = 0.01;         % significance levelprint_flag  = 0;            % 1= auto-print, 0= none, 2= auto-print as jpegclose_flag  = 0;            % 1= auto-close, 0= none%-------------------------------------------if(print_flag==2)    OutputDir   = getconfig(mfilename,'OutputDir');    try    if(~exist(OutputDir,'dir'))        OutputDir   = pwd;    end    catch        OutputDir   = pwd;    end    OutputDir   = uigetdir(OutputDir,'Pick a output directory');    if(OutputDir==0)        disp('User pressed cancel.')        return;    else        setconfig(mfilename,'OutputDir',OutputDir);    endendfid         = fopen(filename,'a');if(fid  == -1)    warndlg({'次のファイルをデータ書き出し用に開くことができませんでした。';'';['     ''',filename,''''];'';'ファイルが他のアプリケーションで開かれていないか、';'ファイルの属性が「読み取り専用」になっていないかチェックして下さい。'})    return;end% disp(fid)fprintf(fid,'--%s (%s)\n',upper(mfilename),datestr(now));s   = sprintf('%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s%s%s\t%s%s',...    'Animal',...                %s\t1    'File',...                %s\t2    'Trigger',...                %s\t3    'Target',...                %s\t4    'nTrials',...                %s\t5    'BStart(ms)',...                %s\t6    'BEnd(ms)',...                %s\t7    'BnBins',...                %s\t8    'BMean',...                %s\t9    'BSTD',...                %s\t10    'nSTD',...                %s\t11    'Component',...                %s\t12    'Start(ms)',...                %s\t13    'End(ms)',...                %s\t14    'nBins',...                %s\t15    'Mean',...                %s\t16    'STD',...                %s\t17    'PeakTime(ms)',...                %s\t18    'Peak',...                %s\t19    'p(',testmethod,')',...                %s%s%s\t20    '<',num2str(alpha));                %s%s21fprintf(fid,'%s\n',s);try    AnalysisObjects = gsma;    nAnalyses = length(AnalysisObjects);    if nAnalyses < 1        disp('PeakAreas: No selected analysis -- nothing to do')        return;    end    % fprintf(fid,'FileName\tSpike\tTrigger\tComponents\tnTrials\tBaseStart(ms)\tBaseEnd(ms)\tBaseMean(count/trial)\tBaseSTD(count/trial)\tStart(ms)\tStartValue(count/trial)\tEnd(ms)\tEndValue(count/trial)\tPeakTime(ms)\tPeak(count/trial)\tMean(count/trial)\tp\t(<0.05)\n');    for ana = 1:nAnalyses        analysisName = get(AnalysisObjects(ana), 'Name');        FullName = get(AnalysisObjects(ana), 'FullName');        AnalysesComponents = analyses(AnalysisObjects(ana), 'componentobjs');        nAnalysesComponents = length(AnalysesComponents);        if nAnalysesComponents == 0            disp(['PeakAreas: No components to do: ' analysisName]);            break;        end        analysisName = strtrim(analysisName);        [animalName,ExpName] = strtok(analysisName);        animalName = strtrim(animalName);        ExpName = strtrim(ExpName);        AnalysisType    = get(AnalysisObjects(ana),'SubClass');                KeyPressFcn     = sprintf('%s\n%s\n%s\n%s\n%s\n%s\n%s\n',...            'if(double(get(gcbo, ''CurrentCharacter'')) == 32)',...            'cursoropt = get(gcbo, ''UserData'');',...            'if(~isempty(cursoropt) & isstruct(cursoropt))',...            'cursoropt.pointermode=mod(cursoropt.pointermode+1,4);',...            'set(gcbo,''UserData'',cursoropt);',...            'end',...            'end');        WindowButtonMotionFcn   = sprintf('%s\n%s\n%s\n%s\n',...            'cursoropt = get(gcbo, ''UserData'');',...            'if(~isempty(cursoropt) & isstruct(cursoropt))',...            'cursor(cursoropt);',...            'end');        fig = figure('Color', [1 1 1],...            'FileName',FullName,...            'KeyPressFcn',KeyPressFcn,...            'MenuBar','figure',...            'Name',FullName,...            'NumberTitle','off',...            'PaperUnits','centimeters',...            'PaperOrientation','landscape',...            'PaperPosition',[0.634517 1.9695 28.4084 17.045],...%[-2.72314 4.91751 26.4382 19.8287]            'PaperPositionMode','manual',...            'PaperSize', [29.6774 20.984],...            'PaperType','A4',...            'Pointer','arrow',...            'Position',[146 121 1000 600],...            'Toolbar','figure'); %,...            'WindowButtonMotionFcn',WindowButtonMotionFcn);        titleh  = uicontrol('BackgroundColor',[1 1 1],...            'Style','text',...            'HorizontalAlignment','center',...            'Position',[10 580 400 20],...            'String',FullName);        set(titleh,'Units','Normalized')        cursoropt.statusbar = uicontrol('BackgroundColor',[0.8 0.8 0.8],...            'Style','text',...            'HorizontalAlignment','left',...            'Units','pixel',...            'Position',[0 0 1000 20],...            'String',[],...            'Tag','statusbar');%         cursoropt.pointermode   = 0;        %0= normal, 1 =vertical, 2=horizontal%         cursoropt.fig           = fig;%         cursoropt.xunit         = '(ms)';%         cursoropt.yunit         = '(counts/trial)';        set(fig,'UserData',cursoropt)                disp('----------------------');        disp(FullName)%         fprintf(fid,'----------------------\n%s\n',FullName);        %Calculate base statics        trialData = get(AnalysesComponents(BaseAna), 'TrialData');        spikeName = get(AnalysesComponents(BaseAna), 'Target');        TrialsToUse   = get(AnalysesComponents(BaseAna), 'TrialsToUse');        nTotalTrials = get(AnalysesComponents(BaseAna), 'TrialCount');        TimeUnits = get(AnalysesComponents(BaseAna), 'TimeUnits');        ConversionFactor_to_msec = units('conversionfactor', 'time', TimeUnits, 'milliseconds');        ConversionFactor_msec_to_sec    = 0.001;        ConversionFactor_sec_to_msec	= 1000;        xData = get(AnalysesComponents(BaseAna), 'XData') * ConversionFactor_to_msec;        binWidth = xData(2) - xData(1);                if(exist('nnms','var'))            nn  = floor(nnms ./ binWidth);            kk  = floor(kkms ./ binWidth);        end        switch AnalysisType            case 'perievent histogram'                yData = get(AnalysesComponents(BaseAna), 'YData') / nTotalTrials; % counts/trials                BaseSE(1) = ceil((BaseRange(1) - (xData(1) - binWidth/2)) / binWidth) + 1;                BaseSE(2) = floor((BaseRange(2) - (xData(1) + binWidth/2)) / binWidth) + 1;            case 'triggered average'                yData = get(AnalysesComponents(BaseAna), 'YData');                xInd    = 1:length(xData);                BaseInd = xData>=BaseRange(1) & xData<=BaseRange(2);                BaseInd = xInd(BaseInd);                BaseSE(1) = BaseInd(1);                BaseSE(2) = BaseInd(end);        end        if isempty(TrialsToUse)            TrialsToUse  = [1:nTotalTrials];        end                BaseData = yData(BaseSE(1):BaseSE(2));        Basemean = mean(BaseData);        Basestd  = std(BaseData);        Limit  = [Basemean-LValue*Basestd , Basemean+LValue*Basestd];        %         s = sprintf('\tBase\t%f\t%f\t%d\t%f\t%f\t%d\t%d',xData(BaseSE(1))-binWidth/2,xData(BaseSE(2))+binWidth/2,BaseSE(2)-BaseSE(1)+1,Basemean,Basestd,nTotalTrials,LValue);%         fprintf(fid,'%s\n',s);%         disp(s)        BaseTrials=[];        switch AnalysisType            case 'perievent histogram'                for ii=1:nTotalTrials                    BaseTrials(ii)   =sum((trialData{TrialsToUse(ii)}* ConversionFactor_sec_to_msec)>=(xData(BaseSE(1))-binWidth/2)&(trialData{TrialsToUse(ii)}* ConversionFactor_sec_to_msec)<(xData(BaseSE(2))+binWidth/2))/(BaseSE(2)-BaseSE(1)+1);                end            case 'triggered average'                for ii=1:nTotalTrials                    BaseTrials(ii)   =mean(trialData(TrialsToUse(ii),BaseSE(1):BaseSE(2)));                end        end%         s = sprintf('\t----\tStart(ms)\tEnd(ms)\tnBins\tMean(counts/trial)\tPeakTime(ms)\tPeak(counts/trial)\tp(%s)\t(<%0.2f)',testmethod,alpha);%         fprintf(fid,'%s\n',s);%         disp(s)        disp(['BaseLine: ',get(AnalysesComponents(BaseAna),'Name'),' (ID: ',num2str(BaseAna),')']);        % Caculate statistics        maxTrials = 0;        for i = 1:nAnalysesComponents            analysisType = get(AnalysesComponents(i), 'SubClass');            spikeName = get(AnalysesComponents(i), 'Target');            TimeUnits = get(AnalysesComponents(i), 'TimeUnits');            %       YDataUnits = get(AnalysesComponents(i), 'YUnits');            ConversionFactor_to_msec = units('conversionfactor', 'time', TimeUnits, 'milliseconds');            ConversionFactor_msec_to_sec    = 0.001;            ConversionFactor_sec_to_msec    = 1000;            WindowStart = get(AnalysesComponents(i), 'WindowStart') * ConversionFactor_to_msec;            WindowStop = get(AnalysesComponents(i), 'WindowStop') * ConversionFactor_to_msec;            trialData = get(AnalysesComponents(i), 'TrialData');            trialTimes = get(AnalysesComponents(i), 'TrialTriggerTime');            TrialsToUse   = get(AnalysesComponents(i), 'TrialsToUse');            nTotalTrials = get(AnalysesComponents(i), 'TrialCount');            nTrials = size(trialData, 1);            name = get(AnalysesComponents(i), 'Name');%             disp(name)%             fprintf(fid,'%s\n',name);            if (nTrials < 4)                disp(['Warning: Too few stored trials in ' analysisName ' : ' name]);                %            break;            end            if (nTrials < nTotalTrials)                disp(['Warning: There are fewer stored trials than averaged trials in ' analysysName ' : ' name]);            end            xData = get(AnalysesComponents(i), 'XData') * ConversionFactor_to_msec;            binWidth = xData(2) - xData(1);            switch AnalysisType                case 'perievent histogram'                    yData = get(AnalysesComponents(i), 'YData') / nTotalTrials;     % counts/trials                case 'triggered average'                    yData = get(AnalysesComponents(BaseAna), 'YData');            end                        nPoints = length(yData);            if isempty(TrialsToUse)                TrialsToUse  = [1:nTotalTrials];            end            PRange    = logical(zeros(1,nPoints));            TRange    = logical(zeros(1,nPoints));            Bigger    = yData>Limit(2);            Smaller   = yData<Limit(1);            ConvBigger    = conv(Bigger,ones(1,nn));            ConvSmaller   = conv(Smaller,ones(1,nn));            for ii=1:nn                PRange    = (PRange | (ConvBigger(1+(ii-1):nPoints+(ii-1))>=kk));                TRange    = (TRange | (ConvSmaller(1+(ii-1):nPoints+(ii-1))>=kk));            end            PRange    = PRange & Bigger;            TRange    = TRange & Smaller;            addTRange = [];            addPRange = [];            left=[];right=[];            for ii=1+(nn-2):nPoints-(nn-2)                if(~TRange(ii))                    for jj=1:nn-2                        left  = sum(TRange(ii-jj:ii-1));                        right = sum(TRange(ii+1:ii+(nn-1-jj)));                        if(left~=0&right~=0&(left+right)>=kk)                            addTRange = [addTRange,ii];                        end                    end                end            end            left=[];right=[];            for ii=1+(nn-2):nPoints-(nn-2)                if(~PRange(ii))                    for jj=1:nn-2                        left  = sum(PRange(ii-jj:ii-1));                        right = sum(PRange(ii+1:ii+(nn-1-jj)));                        if(left~=0&right~=0&(left+right)>=kk)                            addPRange = [addPRange,ii];                        end                    end                end            end            %            %            %       plot(xData(takei(5:124)>=3&TRange),yData((takei(5:124)>=3&TRange)),'r*')            % >> plot(xData(takei(1:120)>=3&TRange),yData((takei(1:120)>=3&TRange)),'r*')            % >> plot(xData(takei(3:122)>=3&~TRange),yData((takei(3:122)>=3&~TRange)),'r*')            %            PRange(addPRange)    = 1;            TRange(addTRange)    = 1;            PeakSE    =[];            TroughSE  =[];            Peak  = [];            Trough    = [];            %       findpeaks            if(sum(PRange)~=0)                [y,PeakSE(:,1)]  = find(([PRange,0]-[0,PRange])==1);                [y,PeakSE(:,2)]  = find(([PRange,0]-[0,PRange])==-1);                PeakSE(:,2) = PeakSE(:,2)-1;                for ii=1:size(PeakSE,1)                    Peak{ii}  =[PeakSE(ii,1):PeakSE(ii,2)];                    [yy,ind]=max(yData(Peak{ii}));                    tPeak(ii).max = yy;                    tPeak(ii).maxTimeBin = Peak{ii}(ind);                    tPeak(ii).maxTime = xData(tPeak(ii).maxTimeBin);                    %               s = sprintf('\tPeak  %d=>\tStart:%0.0f\tStop:%0.0f\tmean:%0.5f',ii,xData(PeakSE(ii,1))-binWidth/2,xData(PeakSE(ii,2))+binWidth/2,mean(yData(Peak{ii})));                    %               disp(s)                end            end            if(sum(TRange)~=0)                [y,TroughSE(:,1)]  = find(([TRange,0]-[0,TRange])==1);                [y,TroughSE(:,2)]  = find(([TRange,0]-[0,TRange])==-1);                TroughSE(:,2) = TroughSE(:,2)-1;                for ii=1:size(TroughSE,1)                    Trough{ii}  =[TroughSE(ii,1):TroughSE(ii,2)];                    [yy,ind]=min(yData(Trough{ii}));                    tTrough(ii).min = yy;                    tTrough(ii).minTimeBin = Trough{ii}(ind);                    tTrough(ii).minTime = xData(tTrough(ii).minTimeBin);                    %               s = sprintf('\tTrough%d=>\tStart:%0.0f\tStop:%0.0f\tmean:%0.5f',ii,xData(TroughSE(ii,1))-binWidth/2,xData(TroughSE(ii,2))+binWidth/2,mean(yData(Trough{ii})));                    %               disp(s)                end            end            %       find nearest Peak or Trough to trigger            allPT = [];            allPT = [xData(PRange),xData(TRange)];            nearestPeak   = [];            nearestTrough = [];            if(sum(allPT>0)~=0)                nearestIndex = find(xData==min(allPT(allPT>0)));                if(sum(PRange)~=0)                    for ii=1:length(Peak)                        if(ismember(nearestIndex,Peak{ii}))                            nearestPeak   = Peak{ii};                        end                    end                end                if(sum(TRange)~=0)                    for ii=1:length(Trough)                        if(ismember(nearestIndex,Trough{ii}))                            nearestTrough   = Trough{ii};                        end                    end                end            end            PeakTrials=[];            Peakp=[];            Peakh=[];            if(~isempty(PeakSE))                for jj=1:size(PeakSE,1)                    switch AnalysisType                        case 'perievent histogram'                            for ii=1:nTotalTrials                                PeakTrials(jj,ii)   =sum((trialData{TrialsToUse(ii)}* ConversionFactor_sec_to_msec)>=(xData(PeakSE(jj,1))-binWidth/2)&(trialData{TrialsToUse(ii)}* ConversionFactor_sec_to_msec)<(xData(PeakSE(jj,2))+binWidth/2))/(PeakSE(jj,2)-PeakSE(jj,1)+1);                            end                        case 'triggered average'                            for ii=1:nTotalTrials                                PeakTrials(jj,ii)   =mean(trialData(TrialsToUse(ii),PeakSE(jj,1):PeakSE(jj,2)));                            end                    end                    switch testmethod                        case 'signrank'                            [Peakp(jj),Peakh(jj),stats]=signrank(BaseTrials,PeakTrials(jj,:),alpha);                        case 'ttest'                            [Peakh(jj),Peakp(jj),cl,stats]=ttest(BaseTrials,PeakTrials(jj,:),alpha);                    end                    if(Peakh(jj)==1)                        switch AnalysisType                            case 'perievent histogram'                        s   = sprintf('%s\t%s\t%s\t%s\t%d\t%f\t%f\t%d\t%f\t%f\t%f\t%s\t%f\t%f\t%d\t%f\t%f\t%f\t%f\t%f\t%c\t',...                            animalName,...    % 'Animal',...                    %s\t1                            ExpName,...    % 'File',...                    %s\t2                            name,...    % 'Trigger\t',...                    %s\t3                            spikeName,...    % 'Target\t',...                    %s\t4                            nTotalTrials,...    % 'nTrials\t',...                    %d\t5                            xData(BaseSE(1))-binWidth/2,...    % 'BStart(ms)\t',...                    %f\t6                            xData(BaseSE(2))+binWidth/2,...    % 'BEnd(ms)\t',...                    %f\t7                            BaseSE(2)-BaseSE(1)+1,...    % 'BnBins\t',...                    %d\t8                            Basemean,...    % 'BMean(counts/trial)\t',...                    %f\t9                            Basestd,...    % 'BSTD(counts/trial)\t',...                    %f\t10                            LValue,...    % 'nSTD\t',...                    %f\t11                            'Peak',...       % 'Component',...                    %s\t12                            xData(PeakSE(jj,1))-binWidth/2,...    % 'Start(ms)\t',...                    %f\t13                            xData(PeakSE(jj,2))+binWidth/2,...    % 'End(ms)\t',...                    %f\t14                            PeakSE(jj,2)-PeakSE(jj,1)+1,...    % 'nBins\t',...                    %d\t15                            mean(yData(Peak{jj})),...    % 'Mean(counts/trial)\t',...                    %f\t16                            std(yData(Peak{jj})),...    % 'STD(counts/trial)\t',...                    %f\t17                            tPeak(jj).maxTime - binWidth/2,...    % 'PeakTime(ms)\t',...                    %f\t18                            tPeak(jj).max,...    % 'Peak(counts/trial)\t',...                    %f\t19                            Peakp(jj),...    % 'p(',testmethod,')\t',...                    %f\t20                            ('*'*Peakh(jj)));    % '<',num2str(alpha));                    %c\t21                            case 'triggered average'                                                s   = sprintf('%s\t%s\t%s\t%s\t%d\t%f\t%f\t%d\t%f\t%f\t%f\t%s\t%f\t%f\t%d\t%f\t%f\t%f\t%f\t%f\t%c\t',...                            animalName,...    % 'Animal',...                    %s\t1                            ExpName,...    % 'File',...                    %s\t2                            name,...    % 'Trigger\t',...                    %s\t3                            spikeName,...    % 'Target\t',...                    %s\t4                            nTotalTrials,...    % 'nTrials\t',...                    %d\t5                            xData(BaseSE(1)),...    % 'BStart(ms)\t',...                    %f\t6                            xData(BaseSE(2)),...    % 'BEnd(ms)\t',...                    %f\t7                            BaseSE(2)-BaseSE(1)+1,...    % 'BnBins\t',...                    %d\t8                            Basemean,...    % 'BMean(counts/trial)\t',...                    %f\t9                            Basestd,...    % 'BSTD(counts/trial)\t',...                    %f\t10                            LValue,...    % 'nSTD\t',...                    %f\t11                            'Peak',...       % 'Component',...                    %s\t12                            xData(PeakSE(jj,1)),...    % 'Start(ms)\t',...                    %f\t13                            xData(PeakSE(jj,2)),...    % 'End(ms)\t',...                    %f\t14                            PeakSE(jj,2)-PeakSE(jj,1)+1,...    % 'nBins\t',...                    %d\t15                            mean(yData(Peak{jj})),...    % 'Mean(counts/trial)\t',...                    %f\t16                            std(yData(Peak{jj})),...    % 'STD(counts/trial)\t',...                    %f\t17                            tPeak(jj).maxTime,...    % 'PeakTime(ms)\t',...                    %f\t18                            tPeak(jj).max,...    % 'Peak(counts/trial)\t',...                    %f\t19                            Peakp(jj),...    % 'p(',testmethod,')\t',...                    %f\t20                            ('*'*Peakh(jj)));    % '<',num2str(alpha));                    %c\t21                        end                        %                     s = sprintf('\tPeak%d\t%f\t%f\t%d\t%f\t%f\t%f\t%f\t%c',jj,xData(PeakSE(jj,1))-binWidth/2,xData(PeakSE(jj,2))+binWidth/2,PeakSE(jj,2)-PeakSE(jj,1)+1,mean(yData(Peak{jj})),tPeak(jj).maxTime - binWidth/2,tPeak(jj).max,Peakp(jj),('*'*Peakh(jj)));                        fprintf(fid,'%s\n',s);                        %                     %            fprintf(fid,'FileName\tTrigger\tComponents\tnTrials\tBaseStart(ms)\tBaseEnd(ms)\tBaseMean(count/trial)\tBaseSTD(count/trial)\tStart(ms)\tStartValue(count/trial)\tEnd(ms)\tEndValue(count/trial)\tMean(count/trial)\tPeakTime(ms)\tPeak(count/trial)\tp\t(<0.05)');                        %                     %            fprintf(fid,'%s\t%s\t%s\tPeak%d\t%d\t%0.0f\t%0.0f\t%0.2f\t%0.2f\t%0.0f\t%0.2f\t%0.0f\t%0.2f\t%0.0f\t%0.2f\t%0.2f\t%0.3f\t%c\n',analysisName,spikeName,name,jj,nTotalTrials,xData(BaseSE(1))-binWidth/2,xData(BaseSE(2))+binWidth/2,Basemean,Basestd,xData(PeakSE(jj,1))-binWidth/2,yData(PeakSE(jj,1)),xData(PeakSE(jj,2))+binWidth/2,yData(PeakSE(jj,1)),tPeak(jj).maxTime,tPeak(jj).max,mean(yData(Peak{jj})),Peakp(jj),('*'*Peakh(jj)));                        %                     disp(s)                    end                end            end            TroughTrials=[];            Troughp=[];            Troughh=[];            if(~isempty(TroughSE))                for jj=1:size(TroughSE,1)                    switch AnalysisType                        case 'perievent histogram'                            for ii=1:nTotalTrials                                TroughTrials(jj,ii)   =sum((trialData{TrialsToUse(ii)}* ConversionFactor_sec_to_msec)>=(xData(TroughSE(jj,1))-binWidth/2)&(trialData{TrialsToUse(ii)}* ConversionFactor_sec_to_msec)<(xData(TroughSE(jj,2))+binWidth/2))/(TroughSE(jj,2)-TroughSE(jj,1)+1);                            end                        case 'triggered average'                            for ii=1:nTotalTrials                                TroughTrials(jj,ii)   =mean(trialData(TrialsToUse(ii),TroughSE(jj,1):TroughSE(jj,2)));                            end                    end                                        switch testmethod                        case 'signrank'                            [Troughp(jj),Troughh(jj),stats]=signrank(BaseTrials,TroughTrials(jj,:),alpha);                        case 'ttest'                            [Troughh(jj),Troughp(jj),cl,stats]=ttest(BaseTrials,TroughTrials(jj,:),alpha);                    end                    if(Troughh(jj)==1)                        switch AnalysisType                            case 'perievent histogram'                        s   = sprintf('%s\t%s\t%s\t%s\t%d\t%f\t%f\t%d\t%f\t%f\t%f\t%s\t%f\t%f\t%d\t%f\t%f\t%f\t%f\t%f\t%c\t',...                            animalName,...    % 'Animal',...                    %s\t1                            ExpName,...    % 'File',...                    %s\t2                            name,...    % 'Trigger\t',...                    %s\t3                            spikeName,...    % 'Target\t',...                    %s\t4                            nTotalTrials,...    % 'nTrials\t',...                    %d\t5                            xData(BaseSE(1))-binWidth/2,...    % 'BStart(ms)\t',...                    %f\t6                            xData(BaseSE(2))+binWidth/2,...    % 'BEnd(ms)\t',...                    %f\t7                            BaseSE(2)-BaseSE(1)+1,...    % 'BnBins\t',...                    %d\t8                            Basemean,...    % 'BMean(counts/trial)\t',...                    %f\t9                            Basestd,...    % 'BSTD(counts/trial)\t',...                    %f\t10                            LValue,...    % 'nSTD\t',...                    %f\t11                            'Trough',...       % 'Component',...                    %s\t12                            xData(TroughSE(jj,1))-binWidth/2,...    % 'Start(ms)\t',...                    %f\t13                            xData(TroughSE(jj,2))+binWidth/2,...    % 'End(ms)\t',...                    %f\t14                            TroughSE(jj,2)-TroughSE(jj,1)+1,...    % 'nBins\t',...                    %d\t15                            mean(yData(Trough{jj})),...    % 'Mean(counts/trial)\t',...                    %f\t16                            std(yData(Trough{jj})),...    % 'STD(counts/trial)\t',...                    %f\t17                            tTrough(jj).minTime - binWidth/2,...    % 'TroughTime(ms)\t',...                    %f\t18                            tTrough(jj).min,...    % 'Trough(counts/trial)\t',...                    %f\t19                            Troughp(jj),...    % 'p(',testmethod,')\t',...                    %f\t20                            ('*'*Troughh(jj)));    % '<',num2str(alpha));                    %c\t21                            case 'triggered average'                                                        s   = sprintf('%s\t%s\t%s\t%s\t%d\t%f\t%f\t%d\t%f\t%f\t%f\t%s\t%f\t%f\t%d\t%f\t%f\t%f\t%f\t%f\t%c\t',...                            animalName,...    % 'Animal',...                    %s\t1                            ExpName,...    % 'File',...                    %s\t2                            name,...    % 'Trigger\t',...                    %s\t3                            spikeName,...    % 'Target\t',...                    %s\t4                            nTotalTrials,...    % 'nTrials\t',...                    %d\t5                            xData(BaseSE(1)),...    % 'BStart(ms)\t',...                    %f\t6                            xData(BaseSE(2)),...    % 'BEnd(ms)\t',...                    %f\t7                            BaseSE(2)-BaseSE(1)+1,...    % 'BnBins\t',...                    %d\t8                            Basemean,...    % 'BMean(counts/trial)\t',...                    %f\t9                            Basestd,...    % 'BSTD(counts/trial)\t',...                    %f\t10                            LValue,...    % 'nSTD\t',...                    %f\t11                            'Trough',...       % 'Component',...                    %s\t12                            xData(TroughSE(jj,1)),...    % 'Start(ms)\t',...                    %f\t13                            xData(TroughSE(jj,2)),...    % 'End(ms)\t',...                    %f\t14                            TroughSE(jj,2)-TroughSE(jj,1)+1,...    % 'nBins\t',...                    %d\t15                            mean(yData(Trough{jj})),...    % 'Mean(counts/trial)\t',...                    %f\t16                            std(yData(Trough{jj})),...    % 'STD(counts/trial)\t',...                    %f\t17                            tTrough(jj).minTime,...    % 'TroughTime(ms)\t',...                    %f\t18                            tTrough(jj).min,...    % 'Trough(counts/trial)\t',...                    %f\t19                            Troughp(jj),...    % 'p(',testmethod,')\t',...                    %f\t20                            ('*'*Troughh(jj)));    % '<',num2str(alpha));                    %c\t21                        end                        fprintf(fid,'%s\n',s);                    end                    %                     s = sprintf('\tTrough%d\t%f\t%f\t%d\t%f\t%f\t%f\t%f\t%c',jj,xData(TroughSE(jj,1))-binWidth/2,xData(TroughSE(jj,2))+binWidth/2,TroughSE(jj,2)-TroughSE(jj,1)+1,mean(yData(Trough{jj})),tTrough(jj).minTime - binWidth/2,tTrough(jj).min,Troughp(jj),('*'*Troughh(jj)));%                     %            fprintf(fid,'%s\t%s\t%s\tTrough%d\t%d\t%0.0f\t%0.0f\t%0.2f\t%0.2f\t%0.0f\t%0.2f\t%0.0f\t%0.2f\t%0.0f\t%0.2f\t%0.2f\t%0.3f\t%c\n',analysisName,spikeName,name,jj,nTotalTrials,xData(BaseSE(1))-binWidth/2,xData(BaseSE(2))+binWidth/2,Basemean,Basestd,xData(TroughSE(jj,1))-binWidth/2,yData(TroughSE(jj,1)),xData(TroughSE(jj,2))+binWidth/2,yData(TroughSE(jj,1)),tTrough(jj).minTime,tTrough(jj).min,mean(yData(Trough{jj})),Troughp(jj),('*'*Troughh(jj)));%                     fprintf(fid,'%s\n',s);%                     disp(s)                end            end            %       anaTrials(i) = nTrials;            %       if nTrials > maxTrials            %           maxTrials = nTrials;            %       end            %            %       for j = 1:1%nTrials            %         trial = double(trialData{j, :});            %       end            subplot(nAnalysesComponents,1,i); hold on; title({name,['n=',num2str(nTotalTrials)]});             switch AnalysisType                 case 'perievent histogram'                     hL = bar(xData,yData,1,'FaceColor','none','EdgeColor','k');                 case 'triggered average'                     hL = plot(xData,yData,'k');             end                         if(~isempty(PeakSE))                for ii=1:size(PeakSE,1)                    switch Peakh(ii)                        case 1                            bar(xData(Peak{ii}),yData(Peak{ii}),1,'b','EdgeColor','none')                            plot(tPeak(ii).maxTime,tPeak(ii).max,'r*')                        case 0                            bar(xData(Peak{ii}),yData(Peak{ii}),1,'y','EdgeColor','none')                    end                end            end            if(~isempty(TroughSE))                for ii=1:size(TroughSE,1)                    switch Troughh(ii)                        case 1                            bar(xData(Trough{ii}),yData(Trough{ii}),1,'g','EdgeColor','none')                            plot(tTrough(ii).minTime,tTrough(ii).min,'r*')                        case 0                            bar(xData(Trough{ii}),yData(Trough{ii}),1,'y','EdgeColor','none')                    end                end            end            %       if(sum(PRange)~=0)            %           bar(xData(PRange),yData(PRange),1,'y');            %       end            %       if(sum(TRange)~=0)            %           bar(xData(TRange),yData(TRange),1,'y');            %       end            %       if(sum(~PRange&~TRange)~=0)            %           bar(xData(~PRange&~TRange),yData(~PRange&~TRange),1,'w');            %       end            %       if(~isempty(nearestPeak))            %           bar(xData(nearestPeak),yData(nearestPeak),1,'b');            %       end            %       if(~isempty(nearestTrough))            %           bar(xData(nearestTrough),yData(nearestTrough),1,'g');            %       end            if(i==BaseAna)                bar(xData((xData>=BaseRange(1))&(xData<BaseRange(2))),yData((xData>=BaseRange(1))&(xData<BaseRange(2))),1,'r','EdgeColor','none')%                 %>>         adding  regression line%                 tempYLim  =get(gca,'YLim');%                 coef  =polyfit(xData([BaseSE(1):BaseSE(2)]),BaseData,1);%                 yreg  =polyval(coef,xData);%                 deltareg  =std(BaseData-yreg([BaseSE(1):BaseSE(2)]));%                 plot(xData,yreg,'c-',xData,yreg-LValue*deltareg,'c--',xData,yreg+LValue*deltareg,'c--');%                 set(gca,'YLim',tempYLim);%                 %<<            end                        gofront(hL)            plot(xData,Basemean*ones(size(xData)),'r-',xData,Limit(1)*ones(size(xData)),'r:',xData,Limit(2)*ones(size(xData)),'r:')            set(gca,'XGrid','off',...                'XMinorGrid','off',...                'XMinorTick','on',...                'XTick',[xData(1)-binWidth/2:10:xData(length(xData))+binWidth/2],...                'XTickLabel',{(xData(1)-binWidth/2)/1000:10:(xData(length(xData))+binWidth/2)/1000},...                'XTickLabelMode','auto',...                'XTickMode','auto');            line([0 0],get(gca,'YLim'),'Color',[0.25 0.25 0.25],'Parent',gca)        end  %for i = 1:nAnalysesComponents        haxes    = findobj(gcf,'Type','axes');        if(length(haxes)>1)            YLims    = get(haxes,'YLim');            set(haxes,'YLim',[min([YLims{:}]),max([YLims{:}])])        end        %    disp(['Basemean: ',num2str(Basemean)]);        %    disp(['Basestd:  ',num2str(Basestd)]);                if(print_flag==1)            print(gcf)        elseif(print_flag==2)            print(fig,'-djpeg90','-r300','-painters',fullfile(OutputDir,FullName));        end        if(close_flag==1)            close(gcf)        end    end     %for ana = 1:nAnalyses    fclose(fid);catch    rethrow(lasterror)    fclose all;end